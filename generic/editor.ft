DECIMAL

64 CONSTANT C/L
VARIABLE SCR
VARIABLE BLOCK#
VARIABLE (BLOCK-DIRTY)

: BLOCK-DIRTY?   (BLOCK-DIRTY) @ ;
: BLOCK-DIRTY   -1 (BLOCK-DIRTY) ! ;
: BLOCK-CLEAN   0 (BLOCK-DIRTY) ! ;
: UPDATE   BLOCK-DIRTY? IF ((BLOCK)) BLOCK# @ (UPDATE) BLOCK-CLEAN THEN ;
: BLOCK   ((BLOCK)) SWAP DUP BLOCK# @ <> IF UPDATE 2DUP (BLOCK) BLOCK# ! ELSE DROP THEN ;
: REVERT   ((BLOCK)) BLOCK# @ (BLOCK)   BLOCK-CLEAN ;

: (LINE-START)   C/L 1- INVERT AND ;
: (LINE-END)   C/L 1- OR ;
: >BLK ( i -- addr )   ((BLOCK)) + ;
: CLR-LAST-CHR ( i -- )   (LINE-END) >BLK BL SWAP C!   BLOCK-DIRTY ;
: >TAIL-LENGTH ( i -- )  C/L TUCK 1- AND - ;
: .TAIL ( i -- )   !CURSOR   DUP >BLK SWAP >TAIL-LENGTH TYPE   @CURSOR ;
: TAIL> ( i -- )   DUP >BLK DUP 1+ ROT >TAIL-LENGTH 1- CMOVE>   BLOCK-DIRTY ;
: TAIL< ( i -- )   DUP DUP >BLK DUP 1+ SWAP ROT >TAIL-LENGTH CMOVE CLR-LAST-CHR ;
: LL ( l -- )  124 TUCK EMIT SPACE   C/L * SCR @ BLOCK + C/L TYPE   SPACE EMIT ;
: LIST ( n -- )  DUP SCR !  U. S"  scr" TYPE CR 0 BEGIN DUP LL CR 1+ DUP 16 = UNTIL DROP ;
: RE ( -- n ) SCR @ ;
: L ( -- ) 0 DUP AT-XY RE LIST ;
: B ( -- ) -1 SCR +! ;
: N ( -- ) 1 SCR +! ;
: !XY ( i -- i ) C/BLK 1- AND DUP C/L /MOD 1+ SWAP 2 + SWAP AT-XY ;
: !CH ( c i -- c i )   DUP TAIL>   2DUP >BLK C!  DUP .TAIL   BLOCK-DIRTY ;
: LINE-START  ( i -- start )   (LINE-START) >BLK ;
: LINE-END ( i -- end ) LINE-START C/L + 1- ;
: BLANK-LINE ( i -- )  LINE-START C/L 1- BLANK   BLOCK-DIRTY ;
: INS-LINE ( i -- )  DUP LINE-START DUP C/L + DUP C/BLK >BLK SWAP - CMOVE> BLANK-LINE ;
: REMOVE-LINE ( i -- )  LINE-START DUP C/L + SWAP OVER C/BLK >BLK SWAP - CMOVE   BLOCK-DIRTY ;
: CLR-LAST-LINE   C/L C/BLK >BLK OVER - SWAP BLANK   BLOCK-DIRTY ;

: ?CH ( c i -- c i' )
    OVER BL - 95 U< IF !CH 1+ EXIT THEN ( text )
    OVER KEY-LEFT = IF 1- THEN
    OVER KEY-RIGHT = IF 1+ THEN
    OVER KEY-UP = IF C/L - THEN
    OVER KEY-DOWN = IF C/L + THEN
    OVER KEY-HOME = IF C/L 1- INVERT AND THEN
    OVER KEY-DELETE = IF DUP TAIL< DUP .TAIL THEN
    OVER KEY-BACKSPACE = IF 1- DUP TAIL< !XY DUP .TAIL THEN
    OVER KEY-PGUP = IF UPDATE B L DROP 0 THEN
    OVER KEY-PGDOWN = IF UPDATE N L DROP 0 THEN
    OVER 4 = IF DUP REMOVE-LINE CLR-LAST-LINE L (LINE-START) THEN
    OVER 14 = IF DUP INS-LINE L THEN
    OVER 11 = IF DUP BLANK-LINE L (LINE-START) THEN
    OVER 18 = IF REVERT   0 DUP AT-XY  BLOCK# @ LIST   THEN
    OVER 9 = IF 3 TUCK + SWAP TUCK / * THEN
    OVER 10 = IF C/L 2DUP MOD - + THEN ( crlf return ) ;
: EDIT ( n -- )
    CLS 0 DUP AT-XY LIST 0
    BEGIN
        63 0 AT-XY BLOCK-DIRTY? 42 AND EMIT
        !XY KEY SWAP ?CH SWAP 24 =
    UNTIL UPDATE DROP L ;
: INIT-BLOCKS   -1 BLOCK# !   BLOCK-CLEAN ;
