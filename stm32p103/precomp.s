
    defword "?ABORT", QABORT, 0x0
    .word ROT, QBRANCH, 0xc, TYPE, ABORT, TWODROP, EXIT

    defword "ABORT", ABORT, 0x0
    .word SZ, SPSTORE, LPARENSQUOTRPAREN, 0x726f4310, 0x726f4665, 0x72206874, 0x79646165, 0x2e, TYPE, CR, QUIT, EXIT

    defword "QUIT", QUIT, 0x0
    .word RZ, RPSTORE, INTERPRET, BRANCH, 0xfffffff8, EXIT

    defword "INTERPRET", INTERPRET, 0x0
    .word LIT, 0x0, STATE, STORE, TIB, LPARENSOURCERPAREN, STORE, LIT, 0x0, GTSOURCE, STORE, ACCEPT, SOURCENUM, STORE, SPACE, LPARENINTERPRETRPAREN, QBRANCH, 0x20, DROP, LPARENSQUOTRPAREN, 0x6b6f2004, 0x20, TYPE, BRANCH, 0x18, COUNT, TYPE, LIT, 0x63, EMIT, CR, EXIT

    defword "?YIELD", QYIELD, 0x80
    .word LIT, IF, EXECUTE, LIT, LIT, COMMAXT, SWAP, COMMA, LIT, LIT, COMMAXT, LATEST, FETCH, LINKGT, GTBODY, COMMA, LIT, STORE, COMMAXT, LIT, EXIT, COMMAXT, LIT, THEN, EXECUTE, EXIT

    defword ";PT", SEMIPT, 0x80
    .word LIT, LIT, COMMAXT, LATEST, FETCH, LINKGT, GTBODY, DUP, CELL, PLUS, COMMA, LIT, LIT, COMMAXT, COMMA, LIT, STORE, COMMAXT, LIT, SEMI, EXECUTE, EXIT

    defword "PT:", PTCOLON, 0x0
    .word CREATE, HERE, CELL, PLUS, COMMA, RBRAC, LPARENDOESGTRPAREN
    .set PTCOLON_XT, .
    .word 0x47884900, DODOES + 1, FETCH, GTR, EXIT

    defword "EDIT", EDIT, 0x0
    .word CLS, LIT, 0x0, DUP, AT_XY, LIST, LIT, 0x0, STOREXY, KEY, SWAP, QCH, SWAP, LIT, 0x18, EQU, QBRANCH, 0xffffffdc, UPDATE, DROP, L, EXIT

    defword "?CH", QCH, 0x0
    .word OVER, BL, MINUS, LIT, 0x5f, ULT, QBRANCH, 0x10, STORECH, ONEPLUS, EXIT, OVER, KEY_LEFT, EQU, QBRANCH, 0x8, ONEMINUS, OVER, KEY_RIGHT, EQU, QBRANCH, 0x8, ONEPLUS, OVER, KEY_UP, EQU, QBRANCH, 0xc, CSLASHL, MINUS, OVER, KEY_DOWN, EQU, QBRANCH, 0xc, CSLASHL, PLUS, OVER, KEY_HOME, EQU, QBRANCH, 0x14, CSLASHL, ONEMINUS, INVERT, AND, OVER, KEY_DELETE, EQU, QBRANCH, 0x14, DUP, TAILLT, DUP, DOTTAIL, OVER, KEY_BACKSPACE, EQU, QBRANCH, 0x1c, ONEMINUS, DUP, TAILLT, STOREXY, DUP, DOTTAIL, OVER, KEY_PGUP, EQU, QBRANCH, 0x1c, UPDATE, B, L, DROP, LIT, 0x0, OVER, KEY_PGDOWN, EQU, QBRANCH, 0x1c, UPDATE, N, L, DROP, LIT, 0x0, OVER, LIT, 0xd, EQU, QBRANCH, 0x18, CSLASHL, TWODUP, MOD, MINUS, PLUS, EXIT

    defword "!CH", STORECH, 0x0
    .word DUP, TAILGT, TWODUP, GTBLK, CSTORE, DUP, DOTTAIL, EXIT

    defword "!XY", STOREXY, 0x0
    .word CSLASHBLK, ONEMINUS, AND, DUP, CSLASHL, SLASHMOD, ONEPLUS, AT_XY, EXIT

    defword "N", N, 0x0
    .word LIT, 0x1, SCR, PLUSSTORE, EXIT

    defword "B", B, 0x0
    .word LIT, 0xffffffff, SCR, PLUSSTORE, EXIT

    defword "L", L, 0x0
    .word LIT, 0x0, DUP, AT_XY, RE, LIST, EXIT

    defword "RE", RE, 0x0
    .word SCR, FETCH, EXIT

    defword "LIST", LIST, 0x0
    .word DUP, SCR, STORE, DOTD, LPARENSQUOTRPAREN, 0x63732004, 0x72, TYPE, CR, LIT, 0x0, DUP, LL, CR, ONEPLUS, DUP, LIT, 0x10, EQU, QBRANCH, 0xffffffdc, DROP, EXIT

    defword "LL", LL, 0x0
    .word CSLASHL, MUL, SCR, FETCH, BLOCK, PLUS, CSLASHL, TYPE, EXIT

    defword "TAIL<", TAILLT, 0x0
    .word DUP, DUP, GTBLK, DUP, ONEPLUS, SWAP, ROT, GTTAIL_LENGTH, CMOVE, CLR_LAST, EXIT

    defword "TAIL>", TAILGT, 0x0
    .word DUP, GTBLK, DUP, ONEPLUS, ROT, GTTAIL_LENGTH, ONEMINUS, CMOVEGT, EXIT

    defword ".TAIL", DOTTAIL, 0x0
    .word STORECURSOR, DUP, GTBLK, SWAP, GTTAIL_LENGTH, TYPE, FETCHCURSOR, EXIT

    defword ">TAIL-LENGTH", GTTAIL_LENGTH, 0x0
    .word CSLASHL, TUCK, ONEMINUS, AND, MINUS, EXIT

    defword "CLR-LAST", CLR_LAST, 0x0
    .word CSLASHL, ONEMINUS, OR, GTBLK, BL, SWAP, CSTORE, EXIT

    defword ">BLK", GTBLK, 0x0
    .word LPARENLPARENBLOCKRPARENRPAREN, PLUS, EXIT

    defword "UPDATE", UPDATE, 0x0
    .word LPARENLPARENBLOCKRPARENRPAREN, BLOCKNUM, FETCH, LPARENUPDATERPAREN, EXIT

    defword "BLOCK", BLOCK, 0x0
    .word LPARENLPARENBLOCKRPARENRPAREN, SWAP, DUP, BLOCKNUM, FETCH, LTGT, QBRANCH, 0x1c, TWODUP, LPARENBLOCKRPAREN, BLOCKNUM, STORE, BRANCH, 0x8, DROP, EXIT

    defvar "BLOCK#", BLOCKNUM, 0x4


    defvar "SCR", SCR, 0x4


    defconst "C/L", CSLASHL, 0x40


    defword "ACCEPT", ACCEPT, 0x0
    .word LIT, 0x0, TIBNUM, STORE, LIT, 0x0, GTTIB, STORE, KEY, DUP, LIT, 0x20, LIT, 0x7f, WITHIN, MINUSFULLQ, AND, QBRANCH, 0x18, INSERT, DOTTIB_TAIL, CURSORGT, BRANCH, 0x12c, DUP, LIT, 0x7f, EQU, MINUSSTARTQ, AND, QBRANCH, 0x1c, DROP, CURSORLT, DELETE, DOTTIB_TAIL, BRANCH, 0xf4, DUP, LIT, 0x8, EQU, OVER, LIT, 0xffffff99, EQU, OR, MINUSENDQ, AND, QBRANCH, 0x18, DROP, DELETE, DOTTIB_TAIL, BRANCH, 0xac, DUP, LIT, 0xd, EQU, OVER, LIT, 0xa, EQU, OR, QBRANCH, 0x1c, DROP, TIBNUM, FETCH, EXIT, BRANCH, 0x68, DUP, LIT, 0xfffffffd, EQU, MINUSENDQ, AND, QBRANCH, 0x14, DROP, CURSORGT, BRANCH, 0x38, DUP, LIT, 0xfffffffc, EQU, MINUSSTARTQ, AND, QBRANCH, 0x14, DROP, CURSORLT, BRANCH, 0x8, DROP, BRANCH, 0xfffffe94, EXIT

    defword "-FULL?", MINUSFULLQ, 0x0
    .word TIBNUM, FETCH, NUMTIB, LT, EXIT

    defword "-END?", MINUSENDQ, 0x0
    .word GTTIB, FETCH, TIBNUM, FETCH, LT, EXIT

    defword "-START?", MINUSSTARTQ, 0x0
    .word GTTIB, FETCH, ZGT, EXIT

    defword "DELETE", DELETE, 0x0
    .word LIT, 0x1, TIBNUM, MINUSSTORE, TIB_TAIL, OVER, ONEPLUS, MINUSROT, CMOVE, EXIT

    defword "INSERT", INSERT, 0x0
    .word TIB_TAIL, OVER, ONEPLUS, SWAP, CMOVEGT, LIT, 0x1, TIBNUM, PLUSSTORE, TIB, GTTIB, FETCH, PLUS, CSTORE, EXIT

    defword "CURSOR<", CURSORLT, 0x0
    .word LIT, 0x1, GTTIB, MINUSSTORE, CURSOR_LEFT, EXIT

    defword "CURSOR>", CURSORGT, 0x0
    .word LIT, 0x1, GTTIB, PLUSSTORE, CURSOR_RIGHT, EXIT

    defword ".TIB-TAIL", DOTTIB_TAIL, 0x0
    .word CLR_EOL, STORECURSOR, TIB_TAIL, TYPE, FETCHCURSOR, EXIT

    defword "TIB-TAIL", TIB_TAIL, 0x0
    .word GTTIB, FETCH, TIBNUM, FETCH, OVER, MINUS, SWAP, TIB, PLUS, SWAP, EXIT

    defconst "KEY-BACKSPACE", KEY_BACKSPACE, -0x6b


    defconst "KEY-PGDOWN", KEY_PGDOWN, -0x6a


    defconst "KEY-PGUP", KEY_PGUP, -0x69


    defconst "KEY-DELETE", KEY_DELETE, -0x67


    defconst "KEY-INSERT", KEY_INSERT, -0x66


    defconst "KEY-END", KEY_END, -0x68


    defconst "KEY-HOME", KEY_HOME, -0x65


    defconst "KEY-RIGHT", KEY_RIGHT, -0x3


    defconst "KEY-LEFT", KEY_LEFT, -0x4


    defconst "KEY-DOWN", KEY_DOWN, -0x2


    defconst "KEY-UP", KEY_UP, -0x1


    defword "CLR-LINE", CLR_LINE, 0x0
    .word ANSI_ESC_START, LIT, 0x32, EMIT, LIT, 0x4b, EMIT, EXIT

    defword "CLR-SOL", CLR_SOL, 0x0
    .word ANSI_ESC_START, LIT, 0x31, EMIT, LIT, 0x4b, EMIT, EXIT

    defword "CLR-EOL", CLR_EOL, 0x0
    .word ANSI_ESC_START, LIT, 0x30, EMIT, LIT, 0x4b, EMIT, EXIT

    defword "CURSOR-LEFT", CURSOR_LEFT, 0x0
    .word ANSI_ESC_START, LIT, 0x44, EMIT, EXIT

    defword "CURSOR-RIGHT", CURSOR_RIGHT, 0x0
    .word ANSI_ESC_START, LIT, 0x43, EMIT, EXIT

    defword "CURSOR-DOWN", CURSOR_DOWN, 0x0
    .word ANSI_ESC_START, LIT, 0x42, EMIT, EXIT

    defword "CURSOR-UP", CURSOR_UP, 0x0
    .word ANSI_ESC_START, LIT, 0x41, EMIT, EXIT

    defword "CLS", CLS, 0x0
    .word ANSI_ESC_START, LIT, 0x32, EMIT, LIT, 0x4a, EMIT, LIT, 0x0, LIT, 0x0, AT_XY, EXIT

    defword "@CURSOR", FETCHCURSOR, 0x0
    .word LIT, 0x1b, EMIT, LIT, 0x38, EMIT, EXIT

    defword "!CURSOR", STORECURSOR, 0x0
    .word LIT, 0x1b, EMIT, LIT, 0x37, EMIT, EXIT

    defword "AT-XY", AT_XY, 0x0
    .word ANSI_ESC_START, ONEPLUS, DOTD, LIT, 0x3b, EMIT, ONEPLUS, DOTD, LIT, 0x48, EMIT, EXIT

    defword "ANSI-ESC-START", ANSI_ESC_START, 0x0
    .word LIT, 0x1b, EMIT, LIT, 0x5b, EMIT, EXIT

    defword "(UPDATE)", LPARENUPDATERPAREN, 0x0
    .word TWODUP, TWOMUL, MMC_WRITE_BLK, DROP, ONEPLUS, SWAP, LIT, 0x200, PLUS, SWAP, MMC_WRITE_BLK, DROP, EXIT

    defword "(BLOCK)", LPARENBLOCKRPAREN, 0x0
    .word TWODUP, TWOMUL, MMC_READ_BLK, DROP, ONEPLUS, SWAP, LIT, 0x200, PLUS, SWAP, MMC_READ_BLK, DROP, EXIT

    defword "((BLOCK))", LPARENLPARENBLOCKRPARENRPAREN, 0x0
    .word PAD, EXIT

    defword "MMC-WRITE-BLK", MMC_WRITE_BLK, 0x0
    .word LIT, 0x200, MUL, LIT, 0x18, SWAP, MMC_CMD, MMC_RES_ONE, DROP, LIT, 0xff, SPI_DRSTORE, LIT, 0xfe, SPI_DRSTORE, LIT, 0x200, LIT, 0x0, LPARENDORPAREN, DUP, CFETCH, SPI_DRSTORE, ONEPLUS, LPARENLOOPRPAREN, QBRANCH, 0xffffffe8, DROP, LIT, 0xff, DUP, SPI_DRSTORE, SPI_DRSTORE, LIT, 0xff, SPI_DRSTOREFETCH, LIT, 0x1f, AND, LIT, 0x5, EQU, LIT, 0xff, DUP, DUP, SPI_DRSTOREFETCH, EQU, QBRANCH, 0xffffffec, DROP, EXIT

    defword "MMC-READ-BLK", MMC_READ_BLK, 0x0
    .word LIT, 0x200, MUL, LIT, 0x11, SWAP, MMC_CMD, MMC_RES_ONE, QBRANCH, 0x10, LIT, 0x0, EXIT, MMC_RES_ONE, LIT, 0xfe, LTGT, QBRANCH, 0x10, LIT, 0x0, EXIT, LIT, 0x200, LIT, 0x0, LPARENDORPAREN, DUP, LIT, 0xff, SPI_DRSTOREFETCH, SWAP, CSTORE, ONEPLUS, LPARENLOOPRPAREN, QBRANCH, 0xffffffdc, DROP, LIT, 0xff, DUP, SPI_DRSTORE, SPI_DRSTORE, LIT, 0x200, EXIT

    defword "MMC-INIT", MMC_INIT, 0x0
    .word SPI_ENABLE, MMC_SPI_MODE, LIT, 0x0, LIT, 0x0, MMC_CMD, MMC_RES_ONE, DROP, LIT, 0x1, LIT, 0x0, MMC_CMD, MMC_RES_ONE, ZEQU, QBRANCH, 0xffffffe0, EXIT

    defword "MMC-RES-1", MMC_RES_ONE, 0x0
    .word LIT, 0xff, DUP, SPI_DRSTOREFETCH, DUP, LIT, 0xff, LTGT, QBRANCH, 0xffffffe8, SWAP, DROP, EXIT

    defword "MMC-CMD", MMC_CMD, 0x0
    .word SWAP, DUP, ZEQU, LIT, 0x94, AND, ONEPLUS, MINUSROT, LIT, 0x40, OR, SPI_DRSTORE, CHEW, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, SPI_DRSTORE, EXIT

    defword "MMC-SPI-MODE", MMC_SPI_MODE, 0x0
    .word HIGH, SPI_CSSTORE, LIT, 0xa, LIT, 0x0, LPARENDORPAREN, LIT, 0xff, SPI_DRSTORE, LPARENLOOPRPAREN, QBRANCH, 0xffffffec, LOW, SPI_CSSTORE, EXIT

    defword "SPI-DR@", SPI_DRFETCH, 0x0
    .word SPI_WAIT_RXNE, SPITWO, SPI_DR, FETCH, EXIT

    defword "SPI-DR!", SPI_DRSTORE, 0x0
    .word SPI_DRSTOREFETCH, DROP, EXIT

    defword "SPI-DR!@", SPI_DRSTOREFETCH, 0x0
    .word SPI_WAIT_TXE, SPITWO, SPI_DR, TUCK, STORE, SPI_WAIT_RXNE, FETCH, EXIT

    defword "SPI-WAIT-TXE", SPI_WAIT_TXE, 0x0
    .word SPITWO, SPI_SR, DUP, FETCH, LIT, 0x2, AND, QBRANCH, 0xffffffe8, DROP, EXIT

    defword "SPI-WAIT-RXNE", SPI_WAIT_RXNE, 0x0
    .word SPITWO, SPI_SR, DUP, FETCH, LIT, 0x1, AND, QBRANCH, 0xffffffe8, DROP, EXIT

    defword "SPI-TXNE?", SPI_TXNEQ, 0x0
    .word SPITWO, SPI_SR, FETCH, LIT, 0x2, AND, INVERT, EXIT

    defword "SPI-RXNE?", SPI_RXNEQ, 0x0
    .word SPITWO, SPI_SR, FETCH, LIT, 0x1, AND, EXIT

    defword "SPI-CS!", SPI_CSSTORE, 0x0
    .word CELLS, NEGATE, GPIOB, GPIO_BRR, PLUS, LIT, 0x1000, SWAP, STORE, EXIT

    defword "SPI-ENABLE", SPI_ENABLE, 0x0
    .word LIT, 0x40000000, RCC_APBONEENR, SET_BITS, GPIOB, GPIO_CRH, DUP, FETCH, LIT, 0xffff, AND, LIT, 0xb4b30000, OR, SWAP, STORE, LIT, 0x4, SPITWO, SPI_CRTWO, STORE, LIT, 0x27c, SPITWO, SPI_CRONE, STORE, EXIT

    defword "LED0!", LEDZSTORE, 0x0
    .word CELLS, GPIOC, GPIO_BSRR, PLUS, LIT, 0x1000, SWAP, STORE, EXIT

    defword "LED0-ENABLE", LEDZ_ENABLE, 0x0
    .word GPIOC, GPIO_CRH, DUP, FETCH, LIT, 0xfff0ffff, AND, LIT, 0x50000, OR, SWAP, STORE, EXIT

    defword "APB-ENABLE", APB_ENABLE, 0x0
    .word LIT, 0x24000, RCC_APBONEENR, SET_BITS, LIT, 0x7d, RCC_APBTWOENR, SET_BITS, EXIT

    defword "SPI-I2SPR", SPI_ITWOSPR, 0x0, REGISTER_XT
    .word 0x20

    defword "SPI-I2SCFGR", SPI_ITWOSCFGR, 0x0, REGISTER_XT
    .word 0x1c

    defword "SPI-TXCRCPR", SPI_TXCRCPR, 0x0, REGISTER_XT
    .word 0x18

    defword "SPI-RXCRCPR", SPI_RXCRCPR, 0x0, REGISTER_XT
    .word 0x14

    defword "SPI-CRCPR", SPI_CRCPR, 0x0, REGISTER_XT
    .word 0x10

    defword "SPI-DR", SPI_DR, 0x0, REGISTER_XT
    .word 0xc

    defword "SPI-SR", SPI_SR, 0x0, REGISTER_XT
    .word 0x8

    defword "SPI-CR2", SPI_CRTWO, 0x0, REGISTER_XT
    .word 0x4

    defword "SPI-CR1", SPI_CRONE, 0x0, REGISTER_XT
    .word 0x0

    defconst "SPI2", SPITWO, 0x40003800


    defconst "SPI1", SPIONE, 0x40013000


    defword "I2C-TRISE", ITWOC_TRISE, 0x0, REGISTER_XT
    .word 0x20

    defword "I2C-CCR", ITWOC_CCR, 0x0, REGISTER_XT
    .word 0x1c

    defword "I2C-SR2", ITWOC_SRTWO, 0x0, REGISTER_XT
    .word 0x18

    defword "I2C-SR1", ITWOC_SRONE, 0x0, REGISTER_XT
    .word 0x14

    defword "I2C-OAR2", ITWOC_OARTWO, 0x0, REGISTER_XT
    .word 0x10

    defword "I2C-OAR1", ITWOC_OARONE, 0x0, REGISTER_XT
    .word 0xc

    defword "I2C-CR2", ITWOC_CRTWO, 0x0, REGISTER_XT
    .word 0x8

    defword "I2C-CR1", ITWOC_CRONE, 0x0, REGISTER_XT
    .word 0x4

    defconst "I2C2", ITWOCTWO, 0x40005800


    defconst "I2C1", ITWOCONE, 0x40005400


    defconst "STCURRENT", STCURRENT, -0x1fff1fe8


    defconst "STRELOAD", STRELOAD, -0x1fff1fec


    defconst "STCTRL", STCTRL, -0x1fff1ff0


    defword "GPIO-LCKR", GPIO_LCKR, 0x0, REGISTER_XT
    .word 0x18

    defword "GPIO-BRR", GPIO_BRR, 0x0, REGISTER_XT
    .word 0x14

    defword "GPIO-BSRR", GPIO_BSRR, 0x0, REGISTER_XT
    .word 0x10

    defword "GPIO-ODR", GPIO_ODR, 0x0, REGISTER_XT
    .word 0xc

    defword "GPIO-IDR", GPIO_IDR, 0x0, REGISTER_XT
    .word 0x8

    defword "GPIO-CRH", GPIO_CRH, 0x0, REGISTER_XT
    .word 0x4

    defword "GPIO-CRL", GPIO_CRL, 0x0, REGISTER_XT
    .word 0x0

    defconst "GPIOG", GPIOG, 0x40012000


    defconst "GPIOF", GPIOF, 0x40011c00


    defconst "GPIOE", GPIOE, 0x40011800


    defconst "GPIOD", GPIOD, 0x40011400


    defconst "GPIOC", GPIOC, 0x40011000


    defconst "GPIOB", GPIOB, 0x40010c00


    defconst "GPIOA", GPIOA, 0x40010800


    defconst "RCC-CFGR2", RCC_CFGRTWO, 0x4002102c


    defconst "RCC-AHBRSTR", RCC_AHBRSTR, 0x40021028


    defconst "RCC-CSR", RCC_CSR, 0x40021024


    defconst "RCC-BDCR", RCC_BDCR, 0x40021020


    defconst "RCC-APB1ENR", RCC_APBONEENR, 0x4002101c


    defconst "RCC-APB2ENR", RCC_APBTWOENR, 0x40021018


    defconst "RCC-AHBENR", RCC_AHBENR, 0x40021014


    defconst "RCC-APB1RSTR", RCC_APBONERSTR, 0x40021010


    defconst "RCC-APB2RSTR", RCC_APBTWORSTR, 0x4002100c


    defconst "RCC-CIR", RCC_CIR, 0x40021008


    defconst "RCC-CFGR", RCC_CFGR, 0x40021004


    defconst "RCC-CR", RCC_CR, 0x40021000


    defconst "RCC", RCC, 0x40021000


    defconst "NVIC", NVIC, -0x1fff2000


    defconst "OFF", OFF, 0x0


    defconst "ON", ON, 0x1


    defconst "DISABLE", DISABLE, 0x0


    defconst "ENABLE", ENABLE, 0x1


    defconst "LOW", LOW, 0x0


    defconst "HIGH", HIGH, 0x1


    defword "CLEAR-BITS", CLEAR_BITS, 0x0
    .word DUP, FETCH, ROT, INVERT, AND, SWAP, STORE, EXIT

    defword "SET-BITS", SET_BITS, 0x0
    .word DUP, FETCH, ROT, OR, SWAP, STORE, EXIT

    defword "REGISTER", REGISTER, 0x0
    .word CREATE, COMMA, LPARENDOESGTRPAREN
    .set REGISTER_XT, .
    .word 0x47884900, DODOES + 1, FETCH, PLUS, EXIT
