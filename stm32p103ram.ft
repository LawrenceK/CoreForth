HEX

: REGISTER   CREATE , DOES> @ + ;
: SET-BITS   DUP @ ROT OR SWAP ! ;
: CLEAR-BITS   DUP @ ROT INVERT AND SWAP ! ;

1 CONSTANT HIGH
0 CONSTANT LOW
1 CONSTANT ENABLE
0 CONSTANT DISABLE
1 CONSTANT ON
0 CONSTANT OFF

E000E010 CONSTANT STCTRL
E000E014 CONSTANT STRELOAD
E000E018 CONSTANT STCURRENT

40005400 CONSTANT I2C1
40005800 CONSTANT I2C2
004 REGISTER I2C-CR1
008 REGISTER I2C-CR2
00C REGISTER I2C-OAR1
010 REGISTER I2C-OAR2
014 REGISTER I2C-SR1
018 REGISTER I2C-SR2
01C REGISTER I2C-CCR
020 REGISTER I2C-TRISE

40013000 CONSTANT SPI1
40003800 CONSTANT SPI2
000 REGISTER SPI-CR1
004 REGISTER SPI-CR2
008 REGISTER SPI-SR
00C REGISTER SPI-DR
010 REGISTER SPI-CRCPR
014 REGISTER SPI-RXCRCPR
018 REGISTER SPI-TXCRCPR
01C REGISTER SPI-I2SCFGR
020 REGISTER SPI-I2SPR

00024000 RCC-APB1ENR SET-BITS   \ UART2 and SPI2
0000007D RCC-APB2ENR SET-BITS   \ All GPIO ports and AFIO

: LED0-ENABLE
    GPIOC GPIO-CRH
    DUP @ FFF0FFFF AND 00050000 OR SWAP ! ;

: LED0!
    CELLS GPIOC GPIO-BSRR + 00001000 SWAP ! ;

: SPI-ENABLE
    40000000 RCC-APB1ENR SET-BITS
    GPIOB GPIO-CRH DUP @ 0000FFFF AND B4B30000 OR SWAP !
    4 SPI2 SPI-CR2 !
    27C SPI2 SPI-CR1 ! ;

: SPI-CS!   CELLS NEGATE GPIOB GPIO-BRR + 00001000 SWAP ! ;

: SPI-RXNE?   SPI2 SPI-SR @ 1 AND ;
: SPI-TXNE?   SPI2 SPI-SR @ 2 AND INVERT ;
: SPI-WAIT-RXNE   SPI2 SPI-SR BEGIN DUP @ 1 AND UNTIL DROP ;
: SPI-WAIT-TXE   SPI2 SPI-SR BEGIN DUP @ 2 AND UNTIL DROP ;
: SPI-DR!@   SPI-WAIT-TXE   SPI2 SPI-DR TUCK !   SPI-WAIT-RXNE   @ ;
: SPI-DR!   SPI-DR!@ DROP ;
: SPI-DR@   SPI-WAIT-RXNE   SPI2 SPI-DR @ ;

: MMC-SPI-MODE
    HIGH SPI-CS!
    0A 0 DO 0FF SPI-DR! LOOP
    LOW SPI-CS! ;

: MMC-CMD
    SWAP DUP 0= 094 AND 1+ -ROT
    40 OR SPI-DR!
    CHEW SPI-DR! SPI-DR! SPI-DR! SPI-DR!
    SPI-DR! ;

: MMC-RES-1
    0FF DUP BEGIN SPI-DR!@ DUP 0FF <> UNTIL SWAP DROP ;

: MMC-INIT
    SPI-ENABLE   MMC-SPI-MODE
    0 0 MMC-CMD MMC-RES-1 DROP
    BEGIN 1 0 MMC-CMD MMC-RES-1 0= UNTIL ;

: MMC-READ-BLK
    200 * 11 SWAP MMC-CMD
    MMC-RES-1 IF 0 EXIT THEN
    MMC-RES-1 0FE <> IF 0 EXIT THEN
    200 0 DO DUP 0FF SPI-DR!@ SWAP C! 1+ LOOP DROP
    0FF DUP SPI-DR! SPI-DR!   \ Drop CRC
    200 ;

: MMC-WRITE-BLK
    200 * 18 SWAP MMC-CMD   MMC-RES-1 DROP  0FF SPI-DR!   \ Seek to sector
    0FE SPI-DR!                                 \ Indicate data start
    200 0 DO DUP C@ SPI-DR! 1+ LOOP DROP        \ Write data
    0FF DUP SPI-DR! SPI-DR!                     \ Dummy CRC
    0FF SPI-DR!@ 1F AND 5 =                     \ Get result
    0FF BEGIN DUP DUP SPI-DR!@ = UNTIL DROP ;   \ Loop until idle

DECIMAL

64 CONSTANT C/L
0 VARIABLE SCR
-1 VARIABLE BLOCK#

: (BLOCK)   BLOCK# @ -1 = IF MMC-INIT THEN   2DUP 2* MMC-READ-BLK DROP  1+ 2* SWAP 512 + SWAP MMC-READ-BLK DROP ;
: (UPDATE)   2DUP 2* MMC-WRITE-BLK DROP   1+ 2* SWAP 512 + SWAP MMC-WRITE-BLK DROP ;
: BLOCK PAD SWAP DUP BLOCK# @ <> IF 2DUP (BLOCK) BLOCK# ! ELSE DROP THEN ;
: UPDATE PAD BLOCK# @ (UPDATE) ;

: LL   C/L * SCR @ BLOCK + C/L TYPE ;
: LIST ( n -- )  DUP SCR !  .D S" scr" TYPE CR 0 BEGIN DUP LL CR 1+ DUP 16 = UNTIL DROP ;
: RE ( -- n ) SCR @ ;
: L ( -- ) 0 DUP AT-XY RE LIST ;
: B ( -- ) -1 SCR +! ;
: N ( -- ) 1 SCR +! ;
: !XY ( i -- i ) 1023 AND DUP C/L /MOD 1+ AT-XY ;
: !CH ( c i -- c i ) 2DUP SCR @ BLOCK + C! OVER EMIT ;
: ?CH ( c i -- c i' )
    OVER BL - 95 U< IF !CH 1+ EXIT THEN ( text )
    OVER KEY-LEFT = IF 1- THEN
    OVER KEY-RIGHT = IF 1+ THEN
    OVER KEY-UP = IF C/L - THEN
    OVER KEY-DOWN = IF C/L + THEN
    OVER KEY-HOME = IF C/L 1- INVERT AND THEN
    OVER KEY-DELETE = IF 1- THEN
    OVER KEY-BACKSPACE = IF 1- THEN
    OVER KEY-PGUP = IF UPDATE B L DROP 0 THEN
    OVER KEY-PGDOWN = IF UPDATE N L DROP 0 THEN
    OVER 13 = IF C/L 2DUP MOD - + THEN ( crlf return ) ;
: EDIT ( n -- ) CLS 0 DUP AT-XY LIST 0 BEGIN !XY KEY SWAP ?CH SWAP 24 = UNTIL UPDATE DROP L ;

HEX

QUIT
